Interactive Simulations of Newtonian Mechanics 
Abstract:
	The concepts of Newtonian mechanics can be difficult to grasp because physics can be challenging to understand unless these concepts can be visualized and observed. The purpose of this project was to create a way to visualize Newtonian mechanics in order to help people see the concepts in action. As a result, an interactive simulation of Newtonian mechanics was created that would allow the user to see the impact of various forces on multiple objects. While there were significant challenges faced throughout the process, the interactive simulation created is user friendly and allows the user to easily observe the behavior of objects that are in collision with one another. Although the final simulator does not perform to the level in which it was initially set out to do, the backend code of the simulator has the ability to be extremely versatile. As it stands, the project has the ability to be taken in many directions in the future, since the code has been written to support multiple functions. 
Introduction:
The project idea was an interactive simulation of Newtonian mechanics that allows the user to understand how physics operates in real life and the results of different forces acting on objects. The main goal was to create a platform for simulations that will be easy to process and applicable for the user to interact with as physics can be complicated. The first step was to generate the correct code to simulate a collision between two objects. While work was done to make this collision between two objects possible, other ideas for this project were being born. Forces such as the gravitational force and the electric force were decided to be implemented into the code. The addition of these forces into the code did not prove to be much of a challenge until it came to demonstrating the interaction of these forces with the objects using the GUI created for this project. This report discusses the design of the project, the algorithm used to accomplish the task of creating the simulations, as well as results that were achieved from this project. 
Design:
The project design revolves around the use of network objects which represents collections of point objects that have certain defined properties such as mass, velocity, location, charge, and force. These networks then go through interactions with other networks by various forces and collisions, and the results of these interactions can be observed in the GUI (Figure 8). 
Data structures are an essential part of the code, being that the networks and the points are both constructed as objects with certain properties. Each individual point in the series of points that makes up the networks contains individual properties including mass, velocity, location, charge, and force (Figure 1). These point objects then make up network objects which have properties of boundary, location, velocity, average velocity, mass, moment of inertia, force, name, and maximum radius (Figure 2). The network objects contain both prescriptive and descriptive properties. Certain properties like the mass are prescriptive properties since the mass is chosen by the user, whereas the moment of inertia is a descriptive property. The moment of inertia is found by performing an algebraic calculation in another script which is then passed to the network. 
After the user defines the mass, velocity, and location of the objects, this information is passed to a function that sets up the networks using this raw data. Next a function calculates prescribed properties of the networks such as the center of mass and the moment of inertia. Once all of the properties in the networks have been filled, the networks are sent to a simulation function which incrementally calculates the state of the points in the networks over time (Figure 3 and Figure 4). The simulation function is broken up into sections which calculate the forces, velocity, location, and torque of the networks, as well as performing several other tasks important in the creation of the objects in the graphical user interface (GUI). 
Once all of these calculations have been computed, the simulation function checks to see whether the networks are colliding by using modified ray casting and calculates the velocities after the networks have collided with each other if in fact the collision detection system finds that they are in collision. The collision detection system works by creating a line segment between the vertex on one object that is closest to the other object and the vertex on that object that is closest to the first object. After this line segment has been created the code must determine if this line segment intersects with one of the boundary lines of the objects. If an intersection is detected a collision has not occurred. However, if there is no intersection this reveals that the vertex of one object is within the other object and the two objects are in collision (Figure 7).  
Lastly, the networks are created in the GUI after all of these calculations have taken place for that particular increment of time and then the simulation function continues to update the information of the objects until the user decides to pause the simulation using a pause button that was added into the GUI (Figure 9). The GUI was created using MATLABâ€™s graphical user interface design environment (GUIDE), making it possible to show an animation of the interaction between the objects while also allowing the user to input his/her own values to create the scenario that he/she wishes to see. A speed slider allows the user to slow down or speed up the simulation, depending on what the user wishes to learn out of observing the simulation (Figure 9). 



![image](https://user-images.githubusercontent.com/25629902/60379127-0c53fc00-99e2-11e9-8d08-301e6acb08bc.png)
Figure 1
Point Objects

![image](https://user-images.githubusercontent.com/25629902/60379142-5c32c300-99e2-11e9-8a19-67450655a6e6.png)
Figure 2
Network Objects


![image](https://user-images.githubusercontent.com/25629902/60379143-62c13a80-99e2-11e9-8e4d-be18c524c302.png)
Figure 3
Simulate Loop Part 1

![image](https://user-images.githubusercontent.com/25629902/60379145-681e8500-99e2-11e9-8546-82c8a66c8616.png)
Figure 4
Simulate Loop Part 2

![image](https://user-images.githubusercontent.com/25629902/60379146-72d91a00-99e2-11e9-825f-4ae76bb9d3bd.png)
Figure 5
Collision Detection Part 1

![image](https://user-images.githubusercontent.com/25629902/60379148-7a002800-99e2-11e9-9514-ca963e85a60f.png)
Figure 6 
Collision Detection Part 2

![image](https://user-images.githubusercontent.com/25629902/60379149-7f5d7280-99e2-11e9-9e3b-688377d14f4a.png)
Figure 7
Collision Detection System
